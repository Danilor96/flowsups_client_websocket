// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                                   Int                             @id @default(autoincrement())
  email                                String                          @unique
  name                                 String?
  last_name                            String?
  username                             String?                         @unique
  password                             String?
  created_at                           DateTime                        @default(now())
  updated_at                           DateTime?
  emailVerified                        DateTime?
  sessions_expires                     DateTime?
  mobile_phone                         String?                         @unique
  img                                  String?
  status_id                            Int?
  round_robin                          Boolean                         @default(false)
  ready_for_leads                      Boolean                         @default(false)
  round_robin_order                    Int?
  sms_template                         Sms_template[]                  @relation("user")
  email_template                       Email_template[]                @relation("user")
  user_has                             Users_has_roles[]
  sender_messages                      Chat_messages[]                 @relation("sender")
  recipient_messages                   Chat_messages[]                 @relation("recipient")
  appointments                         Appointments[]                  @relation("user")
  appointmentCreatedBy                 Appointments[]                  @relation("creator")
  user_code                            Users_has_codes[]
  sender_task                          Tasks[]                         @relation("creator")
  assigned_task                        Tasks[]                         @relation("assigned")
  completed_task                       Tasks[]                         @relation("completed")
  client_seller                        Clients[]                       @relation("seller")
  client_bdc                           Clients[]                       @relation("bdc")
  client_finance_manager               Clients[]                       @relation("finance_manager")
  client_sales_manager                 Clients[]                       @relation("sales_manager")
  assigned_client_lead                 Client_has_lead[]               @relation("client_lead_seller")
  notes                                Notes[]                         @relation("creator_user")
  calls                                Client_calls[]                  @relation("seller_call")
  leads                                Client_has_lead[]               @relation("lead_created_by")
  file_uploader_user                   Clients_has_files[]             @relation("uploader_user")
  event_creator                        Events[]                        @relation("event_creator")
  sms_sender                           Client_sms[]
  users_noti                           Notifications[]                 @relation("users_noti")
  users_status                         User_status?                    @relation("status", fields: [status_id], references: [id], onDelete: Cascade)
  role_creator                         Roles[]                         @relation("creator")
  user_notis                           Notifications_preferences[]     @relation("user_notis")
  sms_template_variables               Sms_template_variables_tagged[]
  vehicle_delivery_creator             Vehicle_delivery[]              @relation("creator")
  vehicle_delivery_assigned            Vehicle_delivery[]              @relation("assigned")
  user_schedule                        User_schedule[]
  daily_visit_history_sales_rep        Daily_visit_history[]           @relation("daily_visit_history_sales_rep")
  daily_visit_history_assigned_manager Daily_visit_history[]           @relation("daily_visit_history_assigned_manager")
  task_notes                           Task_Notes[]
  awaiting_customer                    Awaiting_unknow_client[]
}

model User_schedule {
  id                Int                   @id @default(autoincrement())
  dayweek_id        Int
  from_day_times_id Int
  to_day_times_id   Int
  user_id           Int
  active            Boolean               @default(false)
  dayweek           User_schedule_dayweek @relation(fields: [dayweek_id], references: [id], onDelete: Cascade)
  from_day_time     Day_times             @relation("from", fields: [from_day_times_id], references: [id], onDelete: Cascade)
  to_day_time       Day_times             @relation("to", fields: [to_day_times_id], references: [id], onDelete: Cascade)
  user              Users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User_schedule_dayweek {
  id            Int             @id @default(autoincrement())
  day           String
  user_schedule User_schedule[]
}

model User_status {
  id     Int     @id @default(autoincrement())
  status String
  users  Users[] @relation("status")
}

model Users_has_codes {
  id      Int              @id @default(autoincrement())
  user_id Int              @unique
  code_id Int
  user    Users            @relation(fields: [user_id], references: [id])
  code    Activation_codes @relation(fields: [code_id], references: [id])
}

model Activation_codes {
  id                      Int               @id @default(autoincrement())
  code                    String            @unique
  activation_code_expired DateTime
  code_data               Users_has_codes[]
}

model Roles {
  id         Int                     @id @default(autoincrement())
  role       String
  status_id  Int
  created_by Int?
  created_at DateTime?               @default(now())
  creator    Users?                  @relation("creator", fields: [created_by], references: [id], onDelete: Cascade)
  roles_has  Roles_has_permissions[]
  users_has  Users_has_roles[]
  status     Role_status             @relation("status", fields: [status_id], references: [id], onDelete: Cascade)
}

model Role_status {
  id     Int     @id @default(autoincrement())
  status String
  role   Roles[] @relation("status")
}

model Permissions {
  id             Int                     @id @default(autoincrement())
  permission     String
  permission_has Roles_has_permissions[]
}

model Roles_has_permissions {
  id            Int         @id @default(autoincrement())
  role_id       Int
  permission_id Int
  role          Roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
}

model Users_has_roles {
  id      Int   @id @default(autoincrement())
  role_id Int
  user_id Int   @unique
  role    Roles @relation(fields: [role_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user    Users @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Customers_age {
  id        Int         @id @default(autoincrement())
  gender    String
  customers Customers[]
}

model Customers_status {
  id        Int         @id @default(autoincrement())
  status    String
  customers Customers[]
}

model Customers_gender {
  id        Int         @id @default(autoincrement())
  gender    String
  customers Customers[]
}

model Customers {
  id               Int              @id @default(autoincrement())
  name             String
  last_name        String
  address          String
  phone_number     String
  email            String
  age_id           Int
  gender_id        Int
  status_id        Int
  customer_age     Customers_age    @relation(fields: [age_id], references: [id])
  customer_gender  Customers_gender @relation(fields: [gender_id], references: [id])
  customers_status Customers_status @relation(fields: [status_id], references: [id])
}

model Chat_messages_status {
  id     Int    @id @default(autoincrement())
  status String
}

model Chat_messages {
  id                Int      @id @default(autoincrement())
  messages          String
  sent_date         DateTime
  sender_user_id    Int
  recipient_user_id Int
  sender            Users    @relation("sender", fields: [sender_user_id], references: [id])
  recipient         Users    @relation("recipient", fields: [recipient_user_id], references: [id])
}

model Appointments_status {
  id           Int            @id @default(autoincrement())
  status       String
  appointments Appointments[] @relation("appointment_status")
}

model Appointments {
  id                        Int                 @id @default(autoincrement())
  start_date                DateTime
  end_date                  DateTime
  prevented_start_date      DateTime?
  prevented_end_date        DateTime?
  status_id                 Int
  client_accept_appointment Boolean             @default(false)
  customer_id               Int
  user_id                   Int
  waiting_aprove            Boolean?
  change_reason             String?
  created_by                Int
  created_at                DateTime            @default(now())
  last_check                DateTime?
  task                      Tasks[]             @relation("appointment")
  notification              Notifications[]     @relation("appointment")
  appointments_status       Appointments_status @relation("appointment_status", fields: [status_id], references: [id])
  customers                 Clients             @relation("customer", fields: [customer_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  users                     Users               @relation("user", fields: [user_id], references: [id])
  creator                   Users               @relation("creator", fields: [created_by], references: [id])
  lead_appointment          Client_has_lead[]   @relation("lead_appointment")
}

model Vehicle_make {
  id           Int                      @id @default(autoincrement())
  brand        String                   @unique
  vehicles     Vehicles[]               @relation("vehicle_make")
  tradein_make Client_vehicle_tradein[] @relation("tradein_make")
}

model Vehicle_trim {
  id       Int        @id @default(autoincrement())
  trim     String     @unique
  vehicles Vehicles[] @relation("vehicle_trim")
}

model Vehicle_colors {
  id                 Int                       @id @default(autoincrement())
  color              String
  exterior_vehicles  Vehicles[]                @relation("exterior_vehicle_color")
  interior_vehicles  Vehicles[]                @relation("interior_vehicle_color")
  wishlist_ext_color Client_vehicle_wishlist[] @relation("wishlist_ext_color")
  tradein_int_color  Client_vehicle_tradein[]  @relation("tradein_int_color")
  tradein_ext_color  Client_vehicle_tradein[]  @relation("tradein_ext_color")
}

model Vehicle_models {
  id            Int                      @id @default(autoincrement())
  model         String                   @unique
  vehicles      Vehicles[]               @relation("vehicle_model")
  tradein_model Client_vehicle_tradein[] @relation("tradein_model")
}

model Vehicle_manufacture_years {
  id            Int                       @id @default(autoincrement())
  year          String                    @unique
  vehicles      Vehicles[]                @relation("vehicle_manufacture_year")
  wishlist_year Client_vehicle_wishlist[] @relation("wishlist_year")
  tradein_year  Client_vehicle_tradein[]  @relation("tradein_year")
}

model Vehicle_identification_numbers {
  id          Int                      @id @default(autoincrement())
  vin         String                   @unique
  vehicles    Vehicles?
  tradein_vin Client_vehicle_tradein[] @relation("tradein_vin")
}

model Vehicle_body_types {
  id                 Int                       @id @default(autoincrement())
  type               String                    @unique
  wishlist_body_type Client_vehicle_wishlist[] @relation("wishlist_body_type")
  vehicles           Vehicles[]                @relation("body_type")
}

model Vehicle_transmissions {
  id           Int        @id @default(autoincrement())
  transmission String
  vehicles     Vehicles[] @relation("vehicle_transmission")
}

model Vehicle_prices {
  id             Int                       @id @default(autoincrement())
  price          String
  vehicles       Vehicles[]                @relation("vehicle_price")
  wishlist_price Client_vehicle_wishlist[] @relation("wishlist_price")
}

model Vehicle_fuel_tank_types {
  id       Int        @id @default(autoincrement())
  type     String
  vehicles Vehicles[] @relation("vehicle_fuel_tank_type")
}

// new / use
model Vehicle_conditions {
  id        Int        @id @default(autoincrement())
  condition String
  vehicles  Vehicles[] @relation("vehicle_condition")
}

model Vehicle_mileages {
  id               Int                       @id @default(autoincrement())
  mileage          String
  milleage_type_id Int
  vehicles         Vehicles[]                @relation("vehicle_mileage")
  milleage_type    Vehicle_milleage_type     @relation("milleage_type", fields: [milleage_type_id], references: [id], onDelete: Cascade)
  wishlist_mileage Client_vehicle_wishlist[] @relation("wishlist_mileage")
  tradein_mileage  Client_vehicle_tradein[]  @relation("tradein_mileage")
}

model Vehicle_status {
  id       Int        @id @default(autoincrement())
  status   String
  vehicles Vehicles[] @relation("vehicle_status")
}

model Vehicle_types {
  id               Int                      @id @default(autoincrement())
  type             String
  vehicles         Vehicles[]               @relation("vehicle_type")
  tradein_veh_type Client_vehicle_tradein[] @relation("tradein_veh_type")
}

model Vehicle_license_plates {
  id       Int        @id @default(autoincrement())
  plate    String
  vehicles Vehicles[] @relation("vehicle_plate")
}

model Vehicle_engine {
  id       Int        @id @default(autoincrement())
  engine   String     @unique
  vehicles Vehicles[] @relation("vehicle_engine")
}

model Vehicle_drive_train {
  id          Int        @id @default(autoincrement())
  drive_train String
  vehicles    Vehicles[] @relation("vehicle_drive_train")
}

model Vehicle_milleage_type {
  id               Int                @id @default(autoincrement())
  type             String
  vehicle_milleage Vehicle_mileages[] @relation("milleage_type")
}

model Vehicle_image {
  id       Int        @id @default(autoincrement())
  path     String
  vehicles Vehicles[] @relation("vehicle_image")
}

model Vehicle_body_type {
  id   Int    @id @default(autoincrement())
  type String @unique
}

model Vehicles {
  id                             Int                            @id @default(autoincrement())
  make_id                        Int
  exterior_color_id              Int
  interior_color_id              Int
  entry_stock                    DateTime?
  model_id                       Int
  manufacture_year_id            Int?
  trim_id                        Int?
  engine_id                      Int
  doors                          String
  odometer_make_id               Int
  image_id                       Int?
  cylinder                       String
  gvw                            String
  identification_id              Int                            @unique
  body_type_id                   Int
  transmission_id                Int
  price_id                       Int?
  fuel_tank_type_id              Int
  condition_id                   Int
  mileage_id                     Int?
  hwy                            String
  drive_train_id                 Int
  mpg_city                       String
  weight                         String
  motor                          String
  odometer                       String
  customer_status                String?
  vehicle_type_id                Int
  vehicle_status_id              Int
  vehicle_plate_id               Int?
  title_license_id               Int?
  key_info_id                    Int?
  vehicle_general_info_id        Int?
  vehicle_purchase_info_id       Int?
  general_info                   General_info?                  @relation("general_info", fields: [vehicle_general_info_id], references: [id], onDelete: Cascade)
  purchase_info                  Vehicle_details_purchase_info? @relation("purchase_info", fields: [vehicle_purchase_info_id], references: [id], onDelete: Cascade)
  title_license                  Vehicle_details_title_license? @relation("title_license", fields: [title_license_id], references: [id], onDelete: Cascade)
  key_info                       Vehicle_details_key_info?      @relation("key_info", fields: [key_info_id], references: [id], onDelete: Cascade)
  vehicle_license_plate          Vehicle_license_plates?        @relation("vehicle_plate", fields: [vehicle_plate_id], references: [id], onDelete: Cascade)
  body_type                      Vehicle_body_types             @relation("body_type", fields: [body_type_id], references: [id], onDelete: Cascade)
  vehicle_image                  Vehicle_image?                 @relation("vehicle_image", fields: [image_id], references: [id], onDelete: Cascade)
  vehicle_engine                 Vehicle_engine                 @relation("vehicle_engine", fields: [engine_id], references: [id], onDelete: Cascade)
  vehicle_drive_train            Vehicle_drive_train            @relation("vehicle_drive_train", fields: [drive_train_id], references: [id], onDelete: Cascade)
  vehicle_trim                   Vehicle_trim?                  @relation("vehicle_trim", fields: [trim_id], references: [id], onDelete: Cascade)
  deposit_vehicle                Deposits[]                     @relation("client_deposit_vehicle")
  vehicle_status                 Vehicle_status                 @relation("vehicle_status", fields: [vehicle_status_id], references: [id])
  vehicle_brands                 Vehicle_make                   @relation("vehicle_make", fields: [make_id], references: [id])
  exterior_vehicle_colors        Vehicle_colors                 @relation("exterior_vehicle_color", fields: [exterior_color_id], references: [id])
  interior_vehicle_colors        Vehicle_colors                 @relation("interior_vehicle_color", fields: [interior_color_id], references: [id])
  vehicle_models                 Vehicle_models                 @relation("vehicle_model", fields: [model_id], references: [id])
  vehicle_manufacture_years      Vehicle_manufacture_years?     @relation("vehicle_manufacture_year", fields: [manufacture_year_id], references: [id])
  vehicle_identification_numbers Vehicle_identification_numbers @relation(fields: [identification_id], references: [id], onDelete: Cascade)
  vehicle_transmissions          Vehicle_transmissions          @relation("vehicle_transmission", fields: [transmission_id], references: [id])
  vehicle_prices                 Vehicle_prices?                @relation("vehicle_price", fields: [price_id], references: [id])
  vehicle_fuel_tank_types        Vehicle_fuel_tank_types        @relation("vehicle_fuel_tank_type", fields: [fuel_tank_type_id], references: [id])
  vehicle_conditions             Vehicle_conditions             @relation("vehicle_condition", fields: [condition_id], references: [id])
  vehicle_mileages               Vehicle_mileages?              @relation("vehicle_mileage", fields: [mileage_id], references: [id])
  vehicle_type                   Vehicle_types                  @relation("vehicle_type", fields: [vehicle_type_id], references: [id])
  interested_vehicle             Clients[]                      @relation("interested_vehicle")
  client_wishlist_vehicle        Client_vehicle_wishlist[]      @relation("wishlist_vehicle")
  vehicle_delivery               Vehicle_delivery[]
  daily_visit_history            Daily_visit_history[]
}

model Tasks {
  id                       Int           @id @default(autoincrement())
  title                    String
  description              String
  assigned_to              Int?
  customer_id              Int?
  created_by               Int
  created_at               DateTime      @default(now())
  status                   Int
  deadline                 DateTime
  updated_at               DateTime?
  finished_at              DateTime?
  manager_task             Boolean?
  completed_by             Int?
  assigned_to_all_managers Boolean?
  appointment_id           Int?          @unique
  appointment              Appointments? @relation("appointment", fields: [appointment_id], references: [id], onDelete: Cascade)
  creator                  Users         @relation("creator", fields: [created_by], references: [id], onDelete: Cascade)
  assigned                 Users?        @relation("assigned", fields: [assigned_to], references: [id], onDelete: Cascade)
  completed                Users?        @relation("completed", fields: [completed_by], references: [id], onDelete: Cascade)
  customer                 Clients?      @relation("customer_task", fields: [customer_id], references: [id], onDelete: Cascade)
  task_status              Task_status   @relation("task_status", fields: [status], references: [id], onDelete: Cascade)
  notes                    Task_Notes[]
}

model Task_status {
  id     Int     @id @default(autoincrement())
  status String
  tasks  Tasks[] @relation("task_status")
}

model Lead_types {
  id                  Int                   @id @default(autoincrement())
  type                String
  client_lead_type    Clients[]             @relation("lead_type")
  daily_visit_history Daily_visit_history[]
}

model Lead_sources {
  id                 Int       @id @default(autoincrement())
  source             String
  client_lead_source Clients[] @relation("lead_source")
}

model Contact_methods {
  id                    Int       @id @default(autoincrement())
  method                String
  client_contact_method Clients[] @relation("contact_method")
}

model Languages {
  id              Int       @id @default(autoincrement())
  language        String
  client_language Clients[] @relation("client_language")
}

model Files {
  id           Int                 @id @default(autoincrement())
  file         String
  stipulation  String
  uploaded_on  DateTime
  uploaded_by  Int
  path         String
  content_type String
  client_file  Clients_has_files[] @relation("file")
}

model Clients_has_files {
  id               Int     @id @default(autoincrement())
  file_id          Int
  client_id        Int
  uploader_user_id Int
  file             Files   @relation("file", fields: [file_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  client           Clients @relation("client", fields: [client_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  uploader_user    Users   @relation("uploader_user", fields: [uploader_user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Inquiry_types {
  id             Int       @id @default(autoincrement())
  type           String
  client_inquiry Clients[] @relation("inquiry_type")
}

model Genders {
  id            Int          @id @default(autoincrement())
  gender        String
  client_gender Clients[]    @relation("gender")
  credit_app    Credit_app[] @relation("cresit_app_gender")
}

model Client_types {
  id          Int       @id @default(autoincrement())
  type        String
  client_type Clients[] @relation("client_type")
}

model Notes {
  id               Int               @id @default(autoincrement())
  note             String
  created_by_id    Int
  created_at       DateTime
  client_id        Int
  from_id          Int?
  client_note      Clients           @relation("note", fields: [client_id], references: [id], onDelete: Cascade)
  client_lead_note Client_has_lead[] @relation("assigned_note")
  created_by       Users             @relation("creator_user", fields: [created_by_id], references: [id], onDelete: Cascade)
  from             Client_note_from? @relation("note_from", fields: [from_id], references: [id], onDelete: Cascade)
  deposit          Deposits[]        @relation("deposit_note")
}

model Ad_id {
  id    Int       @id @default(autoincrement())
  ad    String
  ad_id Clients[] @relation("ad_id")
}

model Client_has_cobuyer {
  id                Int                         @id @default(autoincrement())
  buyer_client_id   Int                         @unique
  cobuyer_client_id Int
  relationship_id   Int
  buyer             Clients                     @relation("buyer_client", fields: [buyer_client_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  cobuyer           Clients                     @relation("cobuyer_client", fields: [cobuyer_client_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  relationship      Cobuyer_client_relationship @relation("relationship", fields: [relationship_id], references: [id])
}

model Cobuyer_client_relationship {
  id           Int                  @id @default(autoincrement())
  relationship String
  cobuyer      Client_has_cobuyer[] @relation("relationship")
}

model Client_status {
  id                  Int                   @id @default(autoincrement())
  status              String
  client_status       Clients[]             @relation("client_status")
  customer_settings   Customer_settings[]   @relation("customer")
  daily_visit_history Daily_visit_history[]
}

model States {
  id                         Int                       @id @default(autoincrement())
  state                      String
  client_address_state       Client_address[]          @relation("client_address_state")
  credit_app_address_current Credit_app_address[]      @relation("currentState")
  credit_app_address_mailing Credit_app_address[]      @relation("mailingState")
  prev_state                 Credit_app_address_prev[]
}

model County {
  id                    Int              @id @default(autoincrement())
  county                String
  client_address_county Client_address[] @relation("client_address_county")
}

model Client_address {
  id             Int       @id @default(autoincrement())
  city           String
  street         String
  state_id       Int
  zip            String?
  county_id      Int?
  state          States    @relation("client_address_state", fields: [state_id], references: [id])
  county         County?   @relation("client_address_county", fields: [county_id], references: [id])
  client_address Clients[] @relation("client_address")
}

model Clients_has_referrer {
  id                 Int     @id @default(autoincrement())
  client_buyer_id    Int     @unique
  client_referrer_id Int
  buyer              Clients @relation("buyer_client_referrer", fields: [client_buyer_id], references: [id])
  referrer           Clients @relation("referrer_client", fields: [client_referrer_id], references: [id])
}

model Client_note_from {
  id         Int     @id @default(autoincrement())
  from       String
  notes_from Notes[] @relation("note_from")
}

model Events {
  id            Int      @id @default(autoincrement())
  description   String
  updated_at    DateTime
  updated_by    Int
  client_id     Int
  event_creator Users    @relation("event_creator", fields: [updated_by], references: [id], onDelete: Cascade)
  event_client  Clients  @relation("event_client", fields: [client_id], references: [id], onDelete: Cascade)
}

model Contact_time {
  id              Int       @id @default(autoincrement())
  time            String
  contact_clients Clients[] @relation("contact_time")
}

model Clients {
  id                                Int                       @id @default(autoincrement())
  first_name                        String
  last_name                         String
  salutation                        String?
  nickname                          String?
  middle_initials                   String?
  suffix                            String?
  name_lastname                     String?
  home_phone                        String
  work_phone                        String
  mobile_phone                      String                    @unique
  country_phone_code_id             Int?
  email                             String                    @unique
  social_security                   String
  born_date                         DateTime?
  born_date_hash                    String?
  contact_time_id                   Int?
  current_address                   String
  previous_address                  String?
  mailing_address                   String?
  current_job                       String?
  created_at                        DateTime                  @default(now())
  last_activity                     DateTime?
  previous_job                      String?
  other_income                      String?
  reference                         String?
  referrer_id                       Int?
  cash_down                         String?
  duplicate                         String?
  gender_id                         Int?
  seller_id                         Int?
  bdc_id                            Int?
  finance_manager_id                Int?
  sales_manager_id                  Int?
  lost_date                         DateTime?
  contact_method_id                 Int?
  lead_source_id                    Int
  lead_type_id                      Int
  inquiry_type_id                   Int?
  client_type_id                    Int?
  intereseted_vehicle_id            Int?
  ad_id                             Int?
  deleted                           Boolean?                  @default(false)
  cobuyer                           Boolean?
  consent_approved                  Boolean?                  @default(false)
  consent_sent                      Boolean?                  @default(false)
  consent_to_sent_sms               Boolean?                  @default(false)
  appointment_confirmation_sms_sent Boolean?                  @default(false)
  client_status_id                  Int?
  client_messages_id                Int?
  client_address_id                 Int
  client_language_id                Int?
  lead_temperature_id               Int?
  credit_app_list_status_id         Int?
  country_code                      Country_phone_code?       @relation("country_phone_code", fields: [country_phone_code_id], references: [id], onDelete: Cascade)
  consent_code                      Consent_code[]            @relation("customer")
  credit_app_list_status            Credit_app_list_status?   @relation("credit_app_list_status", fields: [credit_app_list_status_id], references: [id], onDelete: Cascade)
  contact_time                      Contact_time?             @relation("contact_time", fields: [contact_time_id], references: [id], onDelete: Cascade)
  buyer_referrer                    Clients_has_referrer[]    @relation("buyer_client_referrer")
  referrer_client                   Clients_has_referrer[]    @relation("referrer_client")
  event_client                      Events[]                  @relation("event_client")
  client_lead_temperature           Lead_temperature?         @relation("lead_temperature", fields: [lead_temperature_id], references: [id])
  client_address                    Client_address            @relation("client_address", fields: [client_address_id], references: [id])
  appointment                       Appointments[]            @relation("customer")
  language                          Languages?                @relation("client_language", fields: [client_language_id], references: [id])
  file                              Clients_has_files[]       @relation("client")
  buyer_client                      Client_has_cobuyer[]      @relation("buyer_client")
  cobuyer_client                    Client_has_cobuyer[]      @relation("cobuyer_client")
  contact_method                    Contact_methods?          @relation("contact_method", fields: [contact_method_id], references: [id])
  lead_source                       Lead_sources              @relation("lead_source", fields: [lead_source_id], references: [id])
  lead_type                         Lead_types                @relation("lead_type", fields: [lead_type_id], references: [id])
  inquiry_type                      Inquiry_types?            @relation("inquiry_type", fields: [inquiry_type_id], references: [id])
  gender                            Genders?                  @relation("gender", fields: [gender_id], references: [id])
  seller                            Users?                    @relation("seller", fields: [seller_id], references: [id])
  bdc                               Users?                    @relation("bdc", fields: [bdc_id], references: [id])
  finance_manager                   Users?                    @relation("finance_manager", fields: [finance_manager_id], references: [id])
  sales_manager                     Users?                    @relation("sales_manager", fields: [sales_manager_id], references: [id])
  client_type                       Client_types?             @relation("client_type", fields: [client_type_id], references: [id])
  interested_vehicle                Vehicles?                 @relation("interested_vehicle", fields: [intereseted_vehicle_id], references: [id])
  note                              Notes[]                   @relation("note")
  ad                                Ad_id?                    @relation("ad_id", fields: [ad_id], references: [id])
  client_status                     Client_status?            @relation("client_status", fields: [client_status_id], references: [id])
  message                           Client_sms[]              @relation("client_message")
  client_lead                       Client_has_lead[]         @relation("cleant_lead")
  calls                             Client_calls[]            @relation("client_call")
  wishlist_client                   Client_vehicle_wishlist[] @relation("wishlist_client")
  tradein_client                    Client_vehicle_tradein[]  @relation("tradein_vehicle")
  client_employment                 Customer_employment[]     @relation("customer")
  credit_app                        Credit_app[]              @relation("client_credit_app")
  credit_app_address                Credit_app_address[]      @relation("credit_app_address")
  deposit_client                    Deposits[]                @relation("client_deposit")
  customer_task                     Tasks[]                   @relation("customer_task")
  customers_noti                    Notifications[]           @relation("customers_noti")
  deal                              Deal[]
  vehicle_delivery                  Vehicle_delivery[]
  credit_app_reference              Credit_app_reference[]
  credit_app_other_income           Credit_app_other_income[]
  daily_visit_history               Daily_visit_history[]
}

model Credit_app_list_status {
  id                     Int       @id @default(autoincrement())
  status                 String
  credit_app_list_status Clients[] @relation("credit_app_list_status")
}

model Client_sms {
  id                    Int                      @id @default(autoincrement())
  message_sid           String?                  @unique
  sent                  Boolean                  @default(false)
  delivered             Boolean                  @default(false)
  message               String
  date_sent             DateTime?
  sent_by_user          Boolean
  client_id             Int?
  status_id             Int
  fileAttachment        Json?
  read_by               Int[]                    @default([])
  user                  Users[]
  unregistered_customer Awaiting_unknow_client[]
  client_message        Clients?                 @relation("client_message", fields: [client_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  status                Sms_status               @relation("status", fields: [status_id], references: [id], onDelete: Cascade)
}

model Sms_status {
  id     Int          @id @default(autoincrement())
  status String
  sms    Client_sms[] @relation("status")
}

model Client_calls {
  id                 Int            @id @default(autoincrement())
  client_id          Int?
  unknow_call_number String?
  phone_number       String?
  seller_id          Int?
  call_sid           String         @unique
  call_date          DateTime
  call_duration      String
  call_status_id     Int
  call_direction_id  Int
  seller_call        Users?         @relation("seller_call", fields: [seller_id], references: [id])
  client_call        Clients?       @relation("client_call", fields: [client_id], references: [id])
  call_status        Call_statuses  @relation("status", fields: [call_status_id], references: [id])
  call_direction     Call_direction @relation(fields: [call_direction_id], references: [id], onDelete: Cascade)
}

model Suspension {
  id                    Int      @id @default(autoincrement())
  mobile_phone          String
  start_suspension_date DateTime
  end_suspension_date   DateTime
}

model Call_statuses {
  id     Int            @id @default(autoincrement())
  status String
  calls  Client_calls[] @relation("status")
}

model Call_direction {
  id           Int            @id @default(autoincrement())
  direction    String
  client_calls Client_calls[]
}

model Client_detail_leads {
  id          Int               @id @default(autoincrement())
  lead        String
  client_lead Client_has_lead[] @relation("client_lead")
}

model Lead_temperature {
  id               Int       @id @default(autoincrement())
  temperature      String
  lead_temperature Clients[] @relation("lead_temperature")
}

model Deposit_methods {
  id      Int        @id @default(autoincrement())
  method  String
  deposit Deposits[] @relation("client_method")
}

model Deposits {
  id                Int             @id @default(autoincrement())
  client_id         Int
  vehicle_id        Int?
  amount            String
  processing_fee    String?
  total             String
  method_id         Int
  reference         String
  deposit_date      DateTime
  good_through_date DateTime
  non_refundable    Boolean?
  note_id           Int?
  client            Clients         @relation("client_deposit", fields: [client_id], references: [id], onDelete: Cascade)
  vehicle           Vehicles?       @relation("client_deposit_vehicle", fields: [vehicle_id], references: [id], onDelete: Cascade)
  method            Deposit_methods @relation("client_method", fields: [method_id], references: [id], onDelete: Cascade)
  note              Notes?          @relation("deposit_note", fields: [note_id], references: [id], onDelete: Cascade)
}

model Client_has_lead {
  id                   Int                  @id @default(autoincrement())
  lead_id              Int?
  follow_up_date       DateTime?
  assigned_to_id       Int?
  note_id              Int?
  reminder_time        DateTime?
  appointment_id       Int?
  incoming             Boolean?
  outcoming            Boolean?
  dealdate             DateTime?
  client_id            Int
  lost_reason_id       Int?
  created_by_id        Int
  created_at           DateTime
  status_id            Int
  lead_created_by      Users                @relation("lead_created_by", fields: [created_by_id], references: [id])
  client_deal          Client_detail_leads? @relation("client_lead", fields: [lead_id], references: [id])
  assigned_seller      Users?               @relation("client_lead_seller", fields: [assigned_to_id], references: [id])
  note_assigned        Notes?               @relation("assigned_note", fields: [note_id], references: [id])
  appointment_assigned Appointments?        @relation("lead_appointment", fields: [appointment_id], references: [id])
  client_lead          Clients?             @relation("cleant_lead", fields: [client_id], references: [id])
  lost_reason          Lost_reason?         @relation("lost_reason", fields: [lost_reason_id], references: [id])
  lead_status          Lead_status          @relation("lead_status", fields: [status_id], references: [id], onDelete: Cascade)
}

model Lead_status {
  id     Int               @id @default(autoincrement())
  status String
  leads  Client_has_lead[] @relation("lead_status")
}

model Lost_reason {
  id               Int               @id @default(autoincrement())
  reason           String
  lead_lost_reason Client_has_lead[] @relation("lost_reason")
}

model Client_vehicle_wishlist {
  id                Int                       @id @default(autoincrement())
  vehicle_id        Int
  max_mileage_id    Int
  max_price_id      Int
  min_year_id       Int
  exterior_color_id Int
  body_type_id      Int
  client_id_id      Int
  vehicle           Vehicles                  @relation("wishlist_vehicle", fields: [vehicle_id], references: [id], onDelete: Cascade)
  mileage           Vehicle_mileages          @relation("wishlist_mileage", fields: [max_mileage_id], references: [id], onDelete: Cascade)
  price             Vehicle_prices            @relation("wishlist_price", fields: [max_price_id], references: [id], onDelete: Cascade)
  year              Vehicle_manufacture_years @relation("wishlist_year", fields: [min_year_id], references: [id], onDelete: Cascade)
  ext_color         Vehicle_colors            @relation("wishlist_ext_color", fields: [exterior_color_id], references: [id], onDelete: Cascade)
  body_type         Vehicle_body_types        @relation("wishlist_body_type", fields: [body_type_id], references: [id], onDelete: Cascade)
  client            Clients                   @relation("wishlist_client", fields: [client_id_id], references: [id], onDelete: Cascade)
}

model Client_vehicle_tradein {
  id              Int                            @id @default(autoincrement())
  vin_id          Int
  year_id         Int
  make_id         Int
  model_id        Int
  trim_id         Int
  mileage_id      Int
  vehicle_type_id Int
  int_color_id    Int
  ext_color_id    Int
  client_id       Int
  comment_id      Int?
  book_value      String?
  trade_allowance String?
  trade_payoff    String?
  vin             Vehicle_identification_numbers @relation("tradein_vin", fields: [vin_id], references: [id], onDelete: Cascade)
  year            Vehicle_manufacture_years      @relation("tradein_year", fields: [year_id], references: [id], onDelete: Cascade)
  make            Vehicle_make                   @relation("tradein_make", fields: [make_id], references: [id], onDelete: Cascade)
  model           Vehicle_models                 @relation("tradein_model", fields: [model_id], references: [id], onDelete: Cascade)
  trim            Vehicle_trims                  @relation("tradein_trim", fields: [trim_id], references: [id], onDelete: Cascade)
  mileage         Vehicle_mileages               @relation("tradein_mileage", fields: [mileage_id], references: [id], onDelete: Cascade)
  int_color       Vehicle_colors                 @relation("tradein_int_color", fields: [int_color_id], references: [id], onDelete: Cascade)
  ext_color       Vehicle_colors                 @relation("tradein_ext_color", fields: [ext_color_id], references: [id], onDelete: Cascade)
  comment         Vehicle_tradein_comments?      @relation("tradein_comment", fields: [comment_id], references: [id], onDelete: Cascade)
  vehicle_type    Vehicle_types                  @relation("tradein_veh_type", fields: [vehicle_type_id], references: [id], onDelete: Cascade)
  client          Clients                        @relation("tradein_vehicle", fields: [client_id], references: [id], onDelete: Cascade)
}

model Vehicle_tradein_comments {
  id              Int                      @id @default(autoincrement())
  comment         String
  tradein_comment Client_vehicle_tradein[] @relation("tradein_comment")
}

model Vehicle_trims {
  id           Int                      @id @default(autoincrement())
  trim         String
  tradein_trim Client_vehicle_tradein[] @relation("tradein_trim")
}

model Credit_app {
  id                 Int              @id @default(autoincrement())
  client_id          Int              @unique
  ssn                String?
  date_of_birth      DateTime?
  id_type_id         Int?
  id_state_id        Int?
  id_number          String?
  id_issue_date      DateTime?
  id_expiration_date DateTime?
  cash_down          String?
  gender_id          Int?
  send_automated_sms Boolean?
  created_at         DateTime         @default(now())
  client             Clients          @relation("client_credit_app", fields: [client_id], references: [id], onDelete: Cascade)
  id_type            Client_id_type?  @relation("id_type", fields: [id_type_id], references: [id], onDelete: Cascade)
  id_state           Client_id_state? @relation("id_state", fields: [id_state_id], references: [id], onDelete: Cascade)
  gender             Genders?         @relation("cresit_app_gender", fields: [gender_id], references: [id], onDelete: Cascade)
}

model Credit_app_address {
  id                      Int                        @id @default(autoincrement())
  client_id               Int
  current_address         String?
  current_year            String?
  current_month_id        Int?
  current_address_type_id Int?
  current_rent_mort       String?
  current_street          String?
  current_city            String?
  current_state_id        Int?
  current_zip             String?
  current_county          String?
  mailing_address         String?
  mailing_street          String?
  mailing_city            String?
  mailing_state_id        Int?
  mailing_zip             String?
  mailing_county          String?
  client                  Clients                    @relation("credit_app_address", fields: [client_id], references: [id], onDelete: Cascade)
  current_month           Credit_app_address_months? @relation("current_month", fields: [current_month_id], references: [id], onDelete: Cascade)
  current_type            Credit_app_address_type?   @relation("current_type", fields: [current_address_type_id], references: [id], onDelete: Cascade)
  current_state           States?                    @relation("currentState", fields: [current_state_id], references: [id], onDelete: Cascade)
  mailing_state           States?                    @relation("mailingState", fields: [mailing_state_id], references: [id], onDelete: Cascade)
  prev_address            Credit_app_address_prev[]
}

model Credit_app_address_prev {
  id                    Int                        @id @default(autoincrement())
  credit_app_address_id Int
  prev_address          String?
  prev_street           String?
  prev_city             String?
  prev_state_id         Int?
  prev_zip              String?
  prev_county           String?
  prev_year             String?
  prev_month_id         Int?
  prev_address_type_id  Int?
  prev_rent_mort        String?
  credit_app_address    Credit_app_address         @relation(fields: [credit_app_address_id], references: [id], onDelete: Cascade)
  prev_month            Credit_app_address_months? @relation("prev_month", fields: [prev_month_id], references: [id], onDelete: Cascade)
  prev_type             Credit_app_address_type?   @relation("prev_type", fields: [prev_address_type_id], references: [id], onDelete: Cascade)
  prev_state            States?                    @relation(fields: [prev_state_id], references: [id], onDelete: Cascade)
}

model Credit_app_address_months {
  id                         Int                       @id @default(autoincrement())
  month                      String
  employment_month           Customer_employment[]     @relation("employment_months")
  current_credit_app_address Credit_app_address[]      @relation("current_month")
  prev_credit_app_address    Credit_app_address_prev[] @relation("prev_month")
}

model Credit_app_address_type {
  id                         Int                       @id @default(autoincrement())
  type                       String
  current_credit_app_address Credit_app_address[]      @relation("current_type")
  prev_credit_app_address    Credit_app_address_prev[] @relation("prev_type")
}

model Client_id_type {
  id         Int          @id @default(autoincrement())
  id_type    String
  credit_app Credit_app[] @relation("id_type")
}

model Client_id_state {
  id                            Int                             @id @default(autoincrement())
  id_state                      String
  credit_app                    Credit_app[]                    @relation("id_state")
  vehicle_details_title_state   Vehicle_details_title_license[] @relation("title_state")
  vehicle_details_license_state Vehicle_details_title_license[] @relation("license_state")
}

model Customer_employment {
  id                          Int                           @id @default(autoincrement())
  client_id                   Int
  employment_status_id        Int
  current_employer_name       String?
  previous_employer_name      String?
  occupation_id               Int
  year                        String
  month_id                    Int
  income_type_id              Int
  montly_income               String
  client                      Clients                       @relation("customer", fields: [client_id], references: [id], onDelete: Cascade)
  employment_status           Employment_statuses           @relation("employment_status", fields: [employment_status_id], references: [id], onDelete: Cascade)
  occupation                  Customer_occupation           @relation("customer_occupation", fields: [occupation_id], references: [id], onDelete: Cascade)
  month                       Credit_app_address_months     @relation("employment_months", fields: [month_id], references: [id], onDelete: Cascade)
  income_type                 Customer_income_type          @relation("income_type", fields: [income_type_id], references: [id], onDelete: Cascade)
  customer_employment_address Customer_employment_address[]
}

model Customer_income_type {
  id                Int                   @id @default(autoincrement())
  income            String
  employment_income Customer_employment[] @relation("income_type")
}

model Customer_occupation {
  id         Int                   @id @default(autoincrement())
  occupation String
  customer   Customer_employment[] @relation("customer_occupation")
}

model Customer_employment_address {
  id                     Int                 @id @default(autoincrement())
  current_address        String?
  current_phone_number   String?
  previous_phone_number  String?
  previous_address       String?
  customer_employment_id Int
  customer_employment    Customer_employment @relation(fields: [customer_employment_id], references: [id], onDelete: Cascade)
}

model Employment_statuses {
  id                Int                   @id @default(autoincrement())
  status            String
  employment_status Customer_employment[] @relation("employment_status")
}

model Day_times {
  id                          Int             @id @default(autoincrement())
  time                        String
  from_day_time_user_schedule User_schedule[] @relation("from")
  to_day_time_user_schedule   User_schedule[] @relation("to")
}

model Notifications {
  id                        Int                     @id @default(autoincrement())
  user_id                   Int?
  customer_id               Int?
  message                   String
  type_id                   Int
  appointment_id            Int?                    @unique
  created_at                DateTime                @default(now())
  is_read                   Boolean                 @default(false)
  is_deleted                Boolean                 @default(false)
  notification_for_managers Boolean?
  unregistered_customer_id  Int?
  appointment               Appointments?           @relation("appointment", fields: [appointment_id], references: [id], onDelete: Cascade)
  user                      Users?                  @relation("users_noti", fields: [user_id], references: [id], onDelete: Cascade)
  customers                 Clients?                @relation("customers_noti", fields: [customer_id], references: [id], onDelete: Cascade)
  type                      Type_notification       @relation("noti_type", fields: [type_id], references: [id], onDelete: Cascade)
  unregistered_customer     Awaiting_unknow_client? @relation(fields: [unregistered_customer_id], references: [id], onDelete: Cascade)
}

model Type_notification {
  id            Int             @id @default(autoincrement())
  type          String
  notifications Notifications[] @relation("noti_type")
}

model Business {
  id                   Int     @id @default(autoincrement())
  name                 String
  image                String
  mailling_address     String
  county               String
  county_code          String
  store_id             String
  store_license_number String
  store_alias          String?
  sales_tax_license    String
  ein_number           String
  fax_number           String
  email                String
}

model Business_websites {
  id      Int    @id @default(autoincrement())
  website String
}

model Business_vehicle_detail_page_url {
  id  Int    @id @default(autoincrement())
  url String
}

model Business_primary_website_url {
  id  Int    @id @default(autoincrement())
  url String
}

model Country_phone_code {
  id      Int       @id @default(autoincrement())
  country String
  code    String
  clients Clients[] @relation("country_phone_code")
}

model Notifications_preferences {
  id           Int                 @id @default(autoincrement())
  notification String
  type_id      Int
  active       Boolean
  user_id      Int
  user         Users               @relation("user_notis", fields: [user_id], references: [id], onDelete: Cascade)
  type         Notifications_types @relation("noti_type", fields: [type_id], references: [id], onDelete: Cascade)
}

model Notifications_types {
  id              Int                         @id @default(autoincrement())
  type            String
  noti_preference Notifications_preferences[] @relation("noti_type")
}

model Consent_code {
  id           Int      @id @default(autoincrement())
  customer_id  Int      @unique
  token        String   @unique
  code_expired DateTime
  customer     Clients  @relation("customer", fields: [customer_id], references: [id], onDelete: Cascade)
}

model Incidents {
  id       Int     @id @default(autoincrement())
  incident String
  section  String?
}

model Sms_template {
  id          Int                   @id @default(autoincrement())
  name        String
  template    String
  category_id Int
  created_by  Int
  creted_date DateTime
  published   Boolean               @default(false)
  category    Sms_template_category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user        Users                 @relation("user", fields: [created_by], references: [id], onDelete: Cascade)
}

model Header_email_template {
  id             Int              @id @default(autoincrement())
  header         String
  name           String
  email_template Email_template[]
  letterhead     Letterhead[]
}

model Footer_email_template {
  id             Int              @id @default(autoincrement())
  footer         String
  name           String
  email_template Email_template[]
  letterhead     Letterhead[]
}

model Letterhead {
  id        Int                    @id @default(autoincrement())
  header_id Int?
  footer_id Int?
  header    Header_email_template? @relation(fields: [header_id], references: [id], onDelete: Cascade)
  footer    Footer_email_template? @relation(fields: [footer_id], references: [id], onDelete: Cascade)
}

model Email_template {
  id          Int                    @id @default(autoincrement())
  name        String
  category_id Int
  created_by  Int
  created_at  DateTime
  published   Boolean                @default(true)
  header_id   Int?
  body        String
  footer_id   Int?
  category    Sms_template_category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user        Users                  @relation("user", fields: [created_by], references: [id], onDelete: Cascade)
  header      Header_email_template? @relation(fields: [header_id], references: [id], onDelete: Cascade)
  footer      Footer_email_template? @relation(fields: [footer_id], references: [id], onDelete: Cascade)
}

model Customer_settings {
  id                                 Int                      @id @default(autoincrement())
  ignore_first_name                  Boolean                  @default(false)
  active_lost_customer               Boolean                  @default(false)
  show_followup                      Boolean                  @default(false)
  complete_all_open_tasks            Boolean                  @default(false)
  lead_lost_after                    Int
  set_active_lost_customer_status_to Int
  followup_task_visibility           Int
  customer_status                    Client_status            @relation("customer", fields: [set_active_lost_customer_status_to], references: [id], onDelete: Cascade)
  task_visibility                    Followup_task_visibility @relation("visibility", fields: [followup_task_visibility], references: [id], onDelete: Cascade)
}

model Followup_task_visibility {
  id                Int                 @id @default(autoincrement())
  followup          String
  customer_settings Customer_settings[] @relation("visibility")
}

model Email_forward_incoming_leads {
  id   Int    @id @default(autoincrement())
  lead String
}

model Email_to_lead {
  id   Int    @id @default(autoincrement())
  lead String
}

model Custom_be_back_reasons {
  id     Int    @id @default(autoincrement())
  reason String
}

model Custom_no_sale_reasons {
  id     Int    @id @default(autoincrement())
  reason String
}

model Custom_lost_reasons {
  id     Int    @id @default(autoincrement())
  reason String
}

model Tracking_code {
  id   Int    @id @default(autoincrement())
  code String
}

model Unknown_adf_elements {
  id      Int    @id @default(autoincrement())
  element String
}

model Automated_review {
  id                                  Int     @id @default(autoincrement())
  invitation                          String
  enable_automated_review_invitations Boolean @default(false)
}

model Detail_condition {
  id        Int            @id @default(autoincrement())
  condition String
  details   General_info[] @relation("condition")
}

model Inspection_status {
  id              Int                      @id @default(autoincrement())
  status          String
  inspection_data Inspection_status_data[] @relation("status")
}

model Inspection_status_data {
  id              Int               @id @default(autoincrement())
  status_id       Int
  date            DateTime
  id_of_status    String
  inspected_by    String
  vehicle_details General_info[]    @relation("inspection_status")
  status          Inspection_status @relation("status", fields: [status_id], references: [id], onDelete: Cascade)
}

model Emission_status {
  id            Int                    @id @default(autoincrement())
  status        String
  emission_data Emission_status_data[] @relation("status")
}

model Emission_status_data {
  id              Int             @id @default(autoincrement())
  status_id       Int
  date            DateTime
  status          Emission_status @relation("status", fields: [status_id], references: [id], onDelete: Cascade)
  vehicle_details General_info[]  @relation("emission_status")
}

model Sales_type_category {
  id           Int            @id @default(autoincrement())
  type         String
  general_info General_info[]
}

model General_info {
  id                   Int                     @id @default(autoincrement())
  stock_no             String
  date_in_stock        DateTime
  ready_to_shell       DateTime
  location             String
  condition_id         Int?
  inspection_status_id Int?
  sales_type_id        Int?
  emission_status_id   Int?
  vehicle              Vehicles[]              @relation("general_info")
  sales_category       Sales_type_category?    @relation(fields: [sales_type_id], references: [id], onDelete: Cascade)
  condition            Detail_condition?       @relation("condition", fields: [condition_id], references: [id], onDelete: Cascade)
  inspection           Inspection_status_data? @relation("inspection_status", fields: [inspection_status_id], references: [id], onDelete: Cascade)
  emission             Emission_status_data?   @relation("emission_status", fields: [emission_status_id], references: [id], onDelete: Cascade)
}

model Detail_source {
  id      Int                             @id @default(autoincrement())
  source  String
  details Vehicle_details_purchase_info[] @relation("source")
}

model Detail_acq_mill_type {
  id      Int                             @id @default(autoincrement())
  type    String
  details Vehicle_details_purchase_info[] @relation("acq_type")
}

model Vehicle_details_purchase_info {
  id               Int                  @id @default(autoincrement())
  purchase_date    DateTime
  purchase_detail  String?
  acq_mill_in      String
  acq_mill_type_id Int
  buyer            String
  source_id        Int
  purchase_from    String?
  how_did_you_pay  String?
  vehicle          Vehicles[]           @relation("purchase_info")
  source           Detail_source        @relation("source", fields: [source_id], references: [id], onDelete: Cascade)
  acq_type         Detail_acq_mill_type @relation("acq_type", fields: [acq_mill_type_id], references: [id], onDelete: Cascade)
}

model Title_status {
  id              Int                             @id @default(autoincrement())
  status          String
  vehicle_details Vehicle_details_title_license[] @relation("title_status")
}

model Title_brand {
  id              Int                             @id @default(autoincrement())
  brand           String
  vehicle_details Vehicle_details_title_license[] @relation("title_brand")
}

model Vehicle_details_title_license {
  id                       Int              @id @default(autoincrement())
  title_owner              String?
  ros_title                String?
  title_state_id           Int?
  title_status_id          Int?
  title_brand_id           Int?
  license_no               String?
  license_state_id         Int?
  license_expiration       DateTime?
  asking_price             String
  whole_price              String?
  adversiting              String?
  floor_price              String?
  special_price            String?
  special_price_start_date DateTime?
  special_price_end_date   DateTime?
  buy_now_price            String?
  msrp                     String?
  start_bid                String?
  min_down                 String?
  start_bid_2              String?
  min_deposit              String?
  bid_increment            String?
  vehicle_cost             String
  cost_adds                String?
  packs                    String?
  additional               String?
  buyer_fee                String?
  lot_fee                  String?
  vehicle                  Vehicles[]       @relation("title_license")
  title_state              Client_id_state? @relation("title_state", fields: [title_state_id], references: [id], onDelete: Cascade)
  title_status             Title_status?    @relation("title_status", fields: [title_status_id], references: [id], onDelete: Cascade)
  title_brand              Title_brand?     @relation("title_brand", fields: [title_brand_id], references: [id], onDelete: Cascade)
  license_state            Client_id_state? @relation("license_state", fields: [license_state_id], references: [id], onDelete: Cascade)
}

model Payment_method {
  id       Int                        @id @default(autoincrement())
  method   String
  key_info Vehicle_details_key_info[] @relation("payment_method")
}

model Vehicle_details_key_info {
  id                Int             @id @default(autoincrement())
  decal_no          String?
  ignition_code     String?
  door_key_code     String?
  valet_key_code    String?
  duplicate_key     Boolean         @default(false)
  lienholder        String?
  lien_account_no   String?
  payoff_amount     String?
  due_date          DateTime?
  date_paid_off     DateTime?
  payment_method_id Int?
  per_diem          String?
  memo              String?
  vehicle           Vehicles[]      @relation("key_info")
  payment_method    Payment_method? @relation("payment_method", fields: [payment_method_id], references: [id], onDelete: Cascade)
}

model Incoming_calls_options {
  id            Int             @id @default(autoincrement())
  option        String
  voice_and_sms Voice_and_sms[]
}

model Email_name_displayed {
  id            Int             @id @default(autoincrement())
  name          String
  voice_and_sms Voice_and_sms[]
}

model Sms_limit_warning_recipients {
  id        Int    @id @default(autoincrement())
  recipient String
}

model Voice_and_sms {
  id                                         Int                    @id @default(autoincrement())
  system_phone_for_publishing                String?
  system_email_address_for_publishing        String?
  email_verfified                            Boolean                @default(false)
  forward_incoming_calls_to                  String?
  forward_incoming_calls_option_id           Int
  dealership_phone_number                    Boolean                @default(false)
  disable_auto_emails_to_customer            Boolean                @default(false)
  disable_sending_auto_sms_over_montly_limit Boolean                @default(false)
  for_buying_vehicles_from_customers         Boolean                @default(false)
  in_spanish                                 Boolean                @default(false)
  include_dealership_address                 Boolean                @default(false)
  email_name_displayed_id                    Int
  email_name_displayed                       Email_name_displayed   @relation(fields: [email_name_displayed_id], references: [id], onDelete: Cascade)
  forward_incoming_calls_option              Incoming_calls_options @relation(fields: [forward_incoming_calls_option_id], references: [id], onDelete: Cascade)
}

model Sms_template_category {
  id             Int              @id @default(autoincrement())
  category       String
  sms_template   Sms_template[]
  email_template Email_template[]
}

model Sms_template_variables_category {
  id                     Int                      @id @default(autoincrement())
  category               String
  sms_template_variables Sms_template_variables[]
}

model Sms_template_variables {
  id           Int                             @id @default(autoincrement())
  variable     String
  category_id  Int
  category     Sms_template_variables_category @relation(fields: [category_id], references: [id], onDelete: Cascade)
  variable_tag Sms_template_variables_tagged[]
}

model Sms_template_variables_tagged {
  id                       Int                    @id @default(autoincrement())
  sms_template_variable_id Int
  user_id                  Int
  sms_template_variable    Sms_template_variables @relation(fields: [sms_template_variable_id], references: [id], onDelete: Cascade)
  user                     Users                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Deal {
  id                  Int           @id @default(autoincrement())
  downpayment         String
  paid                String
  bonus               String
  moneyDuePaid        String
  frontend            String
  backend             String
  totalProfit         String
  deferredDownpayment String
  bank                String
  sellerCommission    String
  bdcCommission       String
  customer_id         Int
  customer            Clients       @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  paymentDate         PaymentDate[]
}

model PaymentDate {
  id            Int             @id @default(autoincrement())
  date          DateTime
  dealId        Int
  deal          Deal            @relation(fields: [dealId], references: [id], onDelete: Cascade)
  amountPerDate AmountPerDate[]
}

model AmountPerDate {
  id            Int         @id @default(autoincrement())
  amount        String
  paid          Boolean     @default(false)
  paymentDateId Int
  paymentDate   PaymentDate @relation(fields: [paymentDateId], references: [id], onDelete: Cascade)
}

model Vehicle_delivery {
  id            Int      @id @default(autoincrement())
  customer_id   Int
  created_by    Int
  assigned_to   Int
  vehicle_id    Int
  reminder_time Int
  start_date    DateTime
  end_date      DateTime
  vehicle       Vehicles @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  customer      Clients  @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  creator       Users    @relation("creator", fields: [created_by], references: [id], onDelete: Cascade)
  assigned      Users    @relation("assigned", fields: [assigned_to], references: [id], onDelete: Cascade)
}

model Credit_app_reference_relationship {
  id                   Int                    @id @default(autoincrement())
  relationship         String
  credit_app_reference Credit_app_reference[]
}

model Credit_app_other_income {
  id            Int     @id @default(autoincrement())
  income_amount String
  income_source String
  customer_id   Int
  customer      Clients @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model Credit_app_reference {
  id              Int                               @id @default(autoincrement())
  name            String
  phone_number    String
  relationship_id Int
  address         String
  customer_id     Int
  relationship    Credit_app_reference_relationship @relation(fields: [relationship_id], references: [id], onDelete: Cascade)
  customer        Clients                           @relation(fields: [customer_id], references: [id], onDelete: Cascade)
}

model Daily_visit_history {
  id                  Int           @id @default(autoincrement())
  customer_id         Int
  sales_rep_id        Int
  lead_type_id        Int
  vehicle_id          Int
  trade               Boolean       @default(false)
  assigned_manager_id Int?
  location_id         Int?
  decision_id         Int
  managerTurnover     Boolean
  didTheyBuyAVehicle  Boolean
  customer            Clients       @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  sales_rep           Users         @relation("daily_visit_history_sales_rep", fields: [sales_rep_id], references: [id], onDelete: Cascade)
  lead_type           Lead_types    @relation(fields: [lead_type_id], references: [id], onDelete: Cascade)
  vehicle             Vehicles      @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  assigned_manager    Users?        @relation("daily_visit_history_assigned_manager", fields: [assigned_manager_id], references: [id], onDelete: Cascade)
  decision            Client_status @relation(fields: [decision_id], references: [id])
}

model Task_Notes {
  id            Int      @id @default(autoincrement())
  note          String
  created_by_id Int
  created_at    DateTime
  task_id       Int
  user          Users    @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  task          Tasks    @relation(fields: [task_id], references: [id], onDelete: Cascade)
}

model AppointmentSms {
  id  Int    @id @default(autoincrement())
  sms String
}

model ConfirmationSms {
  id  Int    @id @default(autoincrement())
  sms String
}

model Time_span {
  id          Int           @id @default(autoincrement())
  time_span   String
  round_robin Round_robin[]
}

model Round_robin {
  id                                    Int        @id @default(autoincrement())
  ready_for_leads                       Boolean    @default(false)
  automatic_reassign_leads              Boolean    @default(false)
  span_time_id                          Int?
  avoid_automatic_reassign_olders_leads Boolean    @default(false)
  days_until_avoid                      Int?
  assign_leads_during_store_hours       Boolean    @default(false)
  assign_leads_during_shift_hours       Boolean    @default(false)
  users_must_activate_ready_for_leads   Boolean    @default(false)
  span_time                             Time_span? @relation(fields: [span_time_id], references: [id])
}

model Awaiting_unknow_client {
  id                  Int             @id @default(autoincrement())
  mobile_phone_number String?         @unique
  email               String?         @unique
  user_id             Int?
  user                Users?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  sms                 Client_sms[]
  notifications       Notifications[]
}

model Conferences_names {
  id              Int    @id @default(autoincrement())
  conference_name String @unique
}
